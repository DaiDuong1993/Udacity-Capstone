version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.0
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  docker: circleci/docker@2.1.2
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udacapstone-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udacapstone-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:16.15.1
        auth:
          username: $DOCKER_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    docker:
      - image: cimg/node:16.15.1
        auth:
          username: $DOCKER_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            npm i
            npm test

  build-docker-app:
    docker:
      - image: cimg/node:16.15.1
        auth:
          username: $DOCKER_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Front End App
          command: |
            node -v
            npm i
            npm run build
      - docker/build:
          image: udacity-capstone-image
          lint-dockerfile: true
          tag: "${CIRCLE_WORKFLOW_ID:0:7}"
      - docker/push:
          digest-path: yangnguyen1993/udacity-capstone-image
          image: udacity-capstone-image
      # - run:
      #     name: Build Front End App
      #     command: |
      #       node -v
      #       npm i
      #       npm run build
      # - run:
      #     name: build docker image
      #     command: |
      #       TAG=${CIRCLE_WORKFLOW_ID:0:7}
      #       docker build -t udacity-capstone-image:$TAG .
      #       DOCKERPATH=yangnguyen1993/udacity-capstone-image
      #       echo "Docker ID and Image: ${DOCKERPATH}"
      #       docker login -u "$DOCKER_USER" -p "$DOCKERHUB_PASSWORD"
      #       docker tag udacity-capstone-image ${DOCKERPATH}
      #       echo "Docker ID and Image push"
      #       docker push $DOCKERPATH

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udacapstone-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udacity-project
      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: cimg/node:16.15.1
        auth:
          username: $DOCKER_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["41:28:bb:dd:3e:2b:dd:a6:a7:49:ac:f1:c1:73:ce:e3"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            npm i aws-cli
            sleep 5
            aws --version
      - run:
          name: Configure server
          command: |
            EC2_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "EC2_IP:${EC2_IP}"
            ssh -o StrictHostKeyChecking=no ubuntu@${EC2_IP}
            sleep 5
            
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/node:16.15.1
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli
      - run:
          name: Deploy frontend objects
          command: |
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz build
            aws s3 cp build s3://udacapstone-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            echo "------------------------------------"
            echo http://udacapstone-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/
            echo "------------------------------------"

            if curl -s http://udacapstone-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/ | grep "Welcome"
            then
              echo "Frontend Smoke Test Success"
              return 0
            else
              echo "Frontend Smoke Test Failed"
              return 1
            fi
      - destroy-environment

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make 
            yum -y install tar gzip
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID:"${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            echo THIS IS THE OldWorkflowID: "${OldWorkflowID}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              echo '----NOTHING CHANGE-----'
            else
              aws s3 rb s3://udacapstone-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name udacapstone-frontend-${OldWorkflowID}
              echo '----DELETED-----'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - test-frontend:
          requires: [build-frontend]
      - build-docker-app:
          requires: [test-frontend]
      # - deploy-infrastructure:
      #     requires: [build-docker-app]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - deploy-frontend:
      #     requires: [deploy-infrastructure]
      # - smoke-test:
      #     requires: [deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]