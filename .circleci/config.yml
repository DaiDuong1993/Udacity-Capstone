version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.0
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  docker: circleci/docker@2.1.2
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - aws-eks/delete-cluster:
          cluster-name: 'udacity-capstone-${CIRCLE_WORKFLOW_ID:0:7}'
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:16.15.1
        auth:
          username: $DOCKER_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    docker:
      - image: cimg/node:16.15.1
        auth:
          username: $DOCKER_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            npm i
            npm test
  
  scan-dockerfile:
    docker:
      - image: cimg/python:3.10.4
    steps:
      - checkout
      - run:
          name: install hadolint
          command: |
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x ./hadolint
      - run:
          name: lint Dockerfile
          command: |
            ./hadolint Dockerfile

  build-docker-app:
    docker:
      - image: cimg/node:16.15.1
        auth:
          username: $DOCKER_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - checkout
      - docker/check
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Front End App
          command: |
            node -v
            npm i
            npm run build
      - docker/build:
          image: udacity-capstone-image
          registry: 'yangnguyen1993'
          tag: "${CIRCLE_WORKFLOW_ID:0:7}"
      - docker/push:
          digest-path: /tmp/digest.txt
          registry: 'yangnguyen1993'
          image: udacity-capstone-image
          tag: "${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  deploy-frontend:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          EKS React App Cluster
        type: string
    steps:
      - checkout
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: check cluster status
          command: |
            kubectl get services
            kubectl get pods --all-namespaces 
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: ./circleci/files/frontend.yml
          resource-name: udacapstone-frontend
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            echo "------------------------------------"
            echo http://udacapstone-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/
            echo "------------------------------------"

            if curl -s http://udacapstone-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/ | grep "Welcome"
            then
              echo "Frontend Smoke Test Success"
              return 0
            else
              echo "Frontend Smoke Test Failed"
              return 1
            fi
      - destroy-environment

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make 
            yum -y install tar gzip
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID:"${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            echo THIS IS THE OldWorkflowID: "${OldWorkflowID}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              echo '----NOTHING CHANGE-----'
            else
              aws s3 rb s3://udacapstone-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name udacapstone-frontend-${OldWorkflowID}
              echo '----DELETED-----'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - test-frontend:
          requires: [build-frontend]
      - scan-dockerfile:
          requires: [test-frontend]
      - build-docker-app:
          requires: [scan-dockerfile]
      - aws-eks/create-cluster:
          cluster-name: 'udacity-capstone-${CIRCLE_WORKFLOW_ID:0:7}'
          note-type:'m3.medium'
          requires: [build-docker-app]
      - deploy-frontend:
          cluster-name: 'udacity-capstone-${CIRCLE_WORKFLOW_ID:0:7}'
          requires:
            - aws-eks/create-cluster
      # - deploy-frontend:
      #     requires: [deploy-infrastructure]
      # - smoke-test:
      #     requires: [deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]